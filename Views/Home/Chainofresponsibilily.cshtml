@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "Цепочка Обязанностей";
}

<link rel="stylesheet" href="~/css/code.css">
<div class="text-center">
    <h1>Цепочка Обязанностей (Chain of responsibility)</h1>
    <p class="text-left">Цепочка Обязанностей (Chain of responsibility) - поведенческий шаблон проектирования, который позволяет избежать жесткой привязки отправителя запроса к получателю. Все возможные обработчики запроса образуют цепочку, а сам запрос перемещается по этой цепочке. Каждый объект в этой цепочке при получении запроса выбирает, либо закончить обработку запроса, либо передать запрос на обработку следующему по цепочке объекту.</p>
    <h2>Когда применяется цепочка обязанностей?</h2>

    <ul>
        <li class="text-left">Когда имеется более одного объекта, который может обработать определенный запрос</li>
        <li class="text-left">Когда надо передать запрос на выполнение одному из нескольких объект, точно не определяя, какому именно объекту</li>
        <li class="text-left">Когда набор объектов задается динамически</li>
    </ul>
    <p class="text-left">UML-представление паттерна:</p>
    <img src="~/image/chainofresponsibility3.png" />
    <p class="text-left">Формальное определение на языке C#:</p>
    <div id="hler_646671" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">class</code> <code class="plain">Client</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">Main()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Handler h1 = </code><code class="keyword">new</code> <code class="plain">ConcreteHandler1();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Handler h2 = </code><code class="keyword">new</code> <code class="plain">ConcreteHandler2();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">h1.Successor = h2;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">h1.HandleRequest(2);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Handler</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="plain">Handler Successor { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">HandleRequest(</code><code class="keyword">int</code> <code class="plain">condition);</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">class</code> <code class="plain">ConcreteHandler1 : Handler</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">HandleRequest(</code><code class="keyword">int</code> <code class="plain">condition)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// некоторая обработка запроса</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">if</code> <code class="plain">(condition==1)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// завершение выполнения запроса;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// передача запроса дальше по цепи при наличии в ней обработчиков</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(Successor != </code><code class="keyword">null</code><code class="plain">)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Successor.HandleRequest(condition);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">class</code> <code class="plain">ConcreteHandler2 : Handler</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">HandleRequest(</code><code class="keyword">int</code> <code class="plain">condition)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// некоторая обработка запроса</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">if</code> <code class="plain">(condition==2)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// завершение выполнения запроса;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// передача запроса дальше по цепи при наличии в ней обработчиков</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(Successor != </code><code class="keyword">null</code><code class="plain">)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Successor.HandleRequest(condition);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li></ol></div>

    <h2>Участники</h2>
    <ul>
        <li class="text-left">Handler: определяет интерфейс для обработки запроса. Также может определять ссылку на следующий обработчик запроса</li>
        <li class="text-left">
            ConcreteHandler1 и ConcreteHandler2: конкретные обработчики, которые реализуют функционал для обработки запроса. При невозможности обработки и наличия ссылки на следующий обработчик, передают запрос этому обработчику

            В данном случае для простоты примера в качестве параметра передается некоторое число, сначала обработчик обрабатывает запрос и, если передано соответствующее число, завершает его обработку. Иначе передает запрос на обработку следующем в цепи обработчику при его наличии.
        </li>
        <li class="text-left">Client: отправляет запрос объекту Handler</li>
    </ul>
    <p class="text-left">То есть у нас образуется небольшая цепочка обработки запроса:</p>
    <img src="~/image/chainofresponsibility2.png" />
    <p class="text-left">Использование цепочки обязанностей дает нам следующие преимущества:</p>
    <ul>
        <li class="text-left">Ослабление связанности между объектами. Отправителю и получателю запроса ничего не известно друг о друге. Клиенту неизветна цепочка объектов, какие именно объекты составляют ее, как запрос в ней передается.</li>
        <li class="text-left">В цепочку с легкостью можно добавлять новые типы объектов, которые реализуют общий интерфейс.</li>
    </ul>
    <p class="text-left">В то же время у паттерна есть недостаток: никто не гарантирует, что запрос в конечном счете будет обработан. Если необходимого обработчика в цепочки не оказалось, то запрос просто выходит из цепочки и остается необработанным.</p>
    <p class="text-left">Использование паттерна довольно часто встречается в нашей жизни. Достаточно распространена ситуация, когда чиновники перекладывают друг на друга по цепочке выполнения какого-нибудь дела, и оно в конце концов оказывается не выполненным. Или когда мы идем в поликлинику, но при этом точно не знаем характер заболевания. В этом случае мы идем к терапевту, а он в зависимости от заболевания уже может либо сам лечить, либо отправить на лечение другим специализированным врачам.</p>
    <p class="text-left">Рассмотрим конкретный пример. Допустим, необходимо послать человеку определенную сумму денег. Однако мы точно не знаем, какой способ отправки может использоваться: банковский перевод, системы перевода типа WesternUnion и Unistream или система онлайн-платежей PayPal. Нам просто надо внести сумму, выбрать человека и нажать на кнопку. Подобная система может использоваться на сайтах фриланса, где все отношения между исполнителями и заказчиками происходят опосредованно через функции системы и где не надо знать точные данные получателя.</p>

    <p class="text-left">Класс Receiver с помощью конструктора и передаваемых в него параметров устанавливает возможные используемые системы платежей. При осуществлении платежа каждый отдельный объект PaymentHandler будет проверять установку у получателя определенного типа платежей. И если произойдет сопоставление типа платежей у получателя объекту PaymentHandler, то данный объект выполняет платеж. Если же необходимого способа платежей не будет определено, то деньги остаются в системе.</p>
    <p class="text-left">При этом преимуществом цепочки является и то, что она позволяет расположить последовательность объектов-обработчиков в ней в зависимости от их приоритета.</p>
    <h2>Пример на C#:</h2>
    <div id="hler_553794" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">class</code> <code class="plain">Program</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">Main(</code><code class="keyword">string</code><code class="plain">[] args)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Receiver receiver = </code><code class="keyword">new</code> <code class="plain">Receiver(</code><code class="keyword">false</code><code class="plain">, </code><code class="keyword">true</code><code class="plain">, </code><code class="keyword">true</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">PaymentHandler bankPaymentHandler = </code><code class="keyword">new</code> <code class="plain">BankPaymentHandler();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">PaymentHandler moneyPaymentHadler = </code><code class="keyword">new</code> <code class="plain">MoneyPaymentHandler();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">PaymentHandler paypalPaymentHandler = </code><code class="keyword">new</code> <code class="plain">PayPalPaymentHandler();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">bankPaymentHandler.Successor = paypalPaymentHandler;</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">paypalPaymentHandler.Successor = moneyPaymentHadler;</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">bankPaymentHandler.Handle(receiver);</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.Read();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">class</code> <code class="plain">Receiver</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// банковские переводы</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">bool</code> <code class="plain">BankTransfer { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// денежные переводы - WesternUnion, Unistream</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">bool</code> <code class="plain">MoneyTransfer { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// перевод через PayPal</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">bool</code> <code class="plain">PayPalTransfer { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="plain">Receiver(</code><code class="keyword">bool</code> <code class="plain">bt, </code><code class="keyword">bool</code> <code class="plain">mt, </code><code class="keyword">bool</code> <code class="plain">ppt)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">BankTransfer = bt;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">MoneyTransfer = mt;</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">PayPalTransfer = ppt;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">PaymentHandler</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="plain">PaymentHandler Successor { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">Handle(Receiver receiver);</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">class</code> <code class="plain">BankPaymentHandler : PaymentHandler</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Handle(Receiver receiver)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">if</code> <code class="plain">(receiver.BankTransfer == </code><code class="keyword">true</code><code class="plain">)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Выполняем банковский перевод"</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(Successor != </code><code class="keyword">null</code><code class="plain">)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Successor.Handle(receiver);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">class</code> <code class="plain">PayPalPaymentHandler : PaymentHandler</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Handle(Receiver receiver)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">if</code> <code class="plain">(receiver.PayPalTransfer == </code><code class="keyword">true</code><code class="plain">)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Выполняем перевод через PayPal"</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(Successor != </code><code class="keyword">null</code><code class="plain">)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Successor.Handle(receiver);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1"><code class="comments">// переводы с помощью системы денежных переводов</code></li><li class="alt2"><code class="keyword">class</code> <code class="plain">MoneyPaymentHandler : PaymentHandler</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Handle(Receiver receiver)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">if</code> <code class="plain">(receiver.MoneyTransfer == </code><code class="keyword">true</code><code class="plain">)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Выполняем перевод через системы денежных переводов"</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">else</code> <code class="keyword">if</code> <code class="plain">(Successor != </code><code class="keyword">null</code><code class="plain">)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Successor.Handle(receiver);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li></ol></div>

    <h2>Результат работы программы:</h2>

    <img src="~/image/Chainofresponsibilily1.png" />

</div>