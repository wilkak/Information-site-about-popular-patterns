@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "Наблюдатель";
}
<link rel="stylesheet" href="~/css/code.css">
<div class="text-center">
    <h1>Наблюдатель (Observer)</h1>
    <p class="text-left">Паттерн "Наблюдатель" (Observer) представляет поведенческий шаблон проектирования, который использует отношение "один ко многим". В этом отношении есть один наблюдаемый объект и множество наблюдателей. И при изменении наблюдаемого объекта автоматически происходит оповещение всех наблюдателей.</p>

    <p class="text-left">Данный паттерн еще называют Publisher-Subscriber (издатель-подписчик), поскольку отношения издателя и подписчиков характеризуют действие данного паттерна: подписчики подписываются email-рассылку определенного сайта. Сайт-издатель с помощью email-рассылки уведомляет всех подписчиков о изменениях. А подписчики получают изменения и производят определенные действия: могут зайти на сайт, могут проигнорировать уведомления и т.д. </p>
    <h2>Когда использовать паттерн Наблюдатель?</h2>
    <ul>
        <li class="text-left">Когда система состоит из множества классов, объекты которых должны находиться в согласованных состояниях</li>
        <li class="text-left">Когда общая схема взаимодействия объектов предполагает две стороны: одна рассылает сообщения и является главным, другая получает сообщения и реагирует на них. Отделение логики обеих сторон позволяет их рассматривать независимо и использовать отдельно друга от друга.</li>
        <li class="text-left">Когда существует один объект, рассылающий сообщения, и множество подписчиков, которые получают сообщения. При этом точное число подписчиков заранее неизвестно и процессе работы программы может изменяться.</li>

    </ul>
    <p class="text-left">С помощью диаграмм UML данный шаблон можно выразить следующим образом: </p>
    <img src="~/image/observer1.png" />

    <p class="text-left">Формальное определение паттерна на языке C# может выглядеть следующим образом: </p>
    <div id="hler_875866" class="slgh"><ol class="lines no-wrap"><li class="alt1">&nbsp;&nbsp;<code class="keyword">interface</code> <code class="plain">IObservable</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">AddObserver(IObserver o);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">RemoveObserver(IObserver o);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">NotifyObservers();</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1"><code class="keyword">class</code> <code class="plain">ConcreteObservable : IObservable</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">private</code> <code class="plain">List&lt;IObserver&gt; observers;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="plain">ConcreteObservable()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">observers = </code><code class="keyword">new</code> <code class="plain">List&lt;IObserver&gt;();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">AddObserver(IObserver o)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">observers.Add(o);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">RemoveObserver(IObserver o)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">observers.Remove(o);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">NotifyObservers()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">foreach</code> <code class="plain">(IObserver observer </code><code class="keyword">in</code> <code class="plain">observers)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">observer.Update();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">interface</code> <code class="plain">IObserver</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">Update();</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1"><code class="keyword">class</code> <code class="plain">ConcreteObserver :IObserver</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Update()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2"><code class="plain">}</code></li></ol></div>

    <h2>Участники</h2>
    <ul>
        <li class="text-left">IObservable: представляет наблюдаемый объект. Определяет три метода: AddObserver() (для добавления наблюдателя), RemoveObserver() (удаление набюдателя) и NotifyObservers() (уведомление наблюдателей)</li>
        <li class="text-left">ConcreteObservable: конкретная реализация интерфейса IObservable. Определяет коллекцию объектов наблюдателей</li>
        <li class="text-left">IObserver: представляет наблюдателя, который подписывается на все уведомления наблюдаемого объекта. Определяет метод Update(), который вызывается наблюдаемым объектом для уведомления наблюдателя.</li>
        <li class="text-left">ConcreteObserver: конкретная реализация интерфейса IObserver</li>
    </ul>
    <p class="text-left">При этом наблюдаемому объекту не надо ничего знать о наблюдателе кроме того, что тот реализует метод Update(). С помощью отношения агрегации реализуется слабосвязанность обоих компонентов. Изменения в наблюдаемом объекте не виляют на наблюдателя и наоборот.</p>

    <p class="text-left">В определенный момент наблюдатель может прекратить наблюдение. И после этого оба объекта - наблюдатель и наблюдаемый могут продолжать существовать в системе независимо друг от друга. </p>
    <p class="text-left">Рассмотрим реальный пример применения шаблона. Допустим, у нас есть биржа, где проходят торги, и есть брокеры и банки, которые следят за поступающей информацией и в зависимости от поступившей информации производят определенные действия: </p>
    <div id="hler_777592" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">class</code> <code class="plain">Program</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">Main(</code><code class="keyword">string</code><code class="plain">[] args)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Stock stock = </code><code class="keyword">new</code> <code class="plain">Stock();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Bank bank = </code><code class="keyword">new</code> <code class="plain">Bank(</code><code class="string">"ЮнитБанк"</code><code class="plain">, stock);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Broker broker = </code><code class="keyword">new</code> <code class="plain">Broker(</code><code class="string">"Иван Иваныч"</code><code class="plain">, stock);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// имитация торгов</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock.Market();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// брокер прекращает наблюдать за торгами</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">broker.StopTrade();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// имитация торгов</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock.Market();</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.Read();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">interface</code> <code class="plain">IObserver</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">Update(Object ob);</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">interface</code> <code class="plain">IObservable</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">RegisterObserver(IObserver o);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">RemoveObserver(IObserver o);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">void</code> <code class="plain">NotifyObservers();</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">class</code> <code class="plain">Stock : IObservable</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">StockInfo sInfo; </code><code class="comments">// информация о торгах</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">List&lt;IObserver&gt; observers;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="plain">Stock()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">observers = </code><code class="keyword">new</code> <code class="plain">List&lt;IObserver&gt;();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">sInfo= </code><code class="keyword">new</code> <code class="plain">StockInfo();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">RegisterObserver(IObserver o)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">observers.Add(o);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">RemoveObserver(IObserver o)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">observers.Remove(o);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">NotifyObservers()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">foreach</code><code class="plain">(IObserver o </code><code class="keyword">in</code> <code class="plain">observers)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">o.Update(sInfo);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Market()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Random rnd = </code><code class="keyword">new</code> <code class="plain">Random();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">sInfo.USD = rnd.Next(20, 40);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">sInfo.Euro = rnd.Next(30, 50);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">NotifyObservers();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">class</code> <code class="plain">StockInfo</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">USD { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">int</code> <code class="plain">Euro { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">class</code> <code class="plain">Broker : IObserver</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">string</code> <code class="plain">Name { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">IObservable stock;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="plain">Broker(</code><code class="keyword">string</code> <code class="plain">name, IObservable obs)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">this</code><code class="plain">.Name = name;</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock = obs;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock.RegisterObserver(</code><code class="keyword">this</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Update(</code><code class="keyword">object</code> <code class="plain">ob)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">StockInfo sInfo = (StockInfo)ob;</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">if</code><code class="plain">(sInfo.USD&gt;30)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Брокер {0} продает доллары;&nbsp; Курс доллара: {1}"</code><code class="plain">, </code><code class="keyword">this</code><code class="plain">.Name, sInfo.USD);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">else</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Брокер {0} покупает доллары;&nbsp; Курс доллара: {1}"</code><code class="plain">, </code><code class="keyword">this</code><code class="plain">.Name, sInfo.USD);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">StopTrade()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock.RemoveObserver(</code><code class="keyword">this</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock=</code><code class="keyword">null</code><code class="plain">;</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">class</code> <code class="plain">Bank : IObserver</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">string</code> <code class="plain">Name { </code><code class="keyword">get</code><code class="plain">; </code><code class="keyword">set</code><code class="plain">; }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">IObservable stock;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="plain">Bank(</code><code class="keyword">string</code> <code class="plain">name, IObservable obs)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">this</code><code class="plain">.Name = name;</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock = obs;</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">stock.RegisterObserver(</code><code class="keyword">this</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Update(</code><code class="keyword">object</code> <code class="plain">ob)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">StockInfo sInfo = (StockInfo)ob;</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">if</code> <code class="plain">(sInfo.Euro &gt; 40)</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Банк {0} продает евро;&nbsp; Курс евро: {1}"</code><code class="plain">, </code><code class="keyword">this</code><code class="plain">.Name, sInfo.Euro);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">else</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Банк {0} покупает евро;&nbsp; Курс евро: {1}"</code><code class="plain">, </code><code class="keyword">this</code><code class="plain">.Name, sInfo.Euro);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li></ol></div>

    <h2>Результат работы программы:</h2>
    <img src="~/image/observer2.png" />
    <p class="text-left">Итак, здесь наблюдаемый объект представлен интерфейсом IObservable, а наблюдатель - интерфейсом IObserver. Реализацией интерфейса IObservable является класс Stock, который символизирует валютную биржу. В этом классе определен метод Market(), который имитирует торги и инкапсулирует всю информацию о валютных курсах в объекте StockInfo. После проведения торгов производится уведомление всех наблюдателей. </p>
    <p class="text-left">Реализациями интерфейса IObserver являются классы Broker, представляющий брокера, и Bank, представляющий банк. При этом метод Update() интерфейса IObserver принимает в качестве параметра некоторый объект. Реализация этого метода подразумевает получение через данный параметр объекта StockInfo с текущей информацией о торгах и произведение некоторых действий: покупка или продажа долларов и евро. Дело в том, что часто необходимо информировать наблюдателя об изменении состояния наблюдаемого объекта. В данном случае состояние заключено в объекте StockInfo. И одним из вариантом информирования наблюдателя о состоянии является push-модель, при которой наблюдаемый объект передает (иначе говоря толкает - push) данные о своем состоянии, то есть передаем в виде параметра метода Update(). </p>
    <p class="text-left">Альтернативой push-модели является pull-модель, когда наблюдатель вытягивает (pull) из наблюдаемого объекта данные о состоянии с помощью дополнительных методов. </p>
    <p class="text-left">Также в классе брокера определен дополнительный метод StopTrade(), с помощью которого брокер может отписаться от уведомлений биржи и перестать быть наблюдателем. </p>

</div>