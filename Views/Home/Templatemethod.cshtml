@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = " Шаблонный метод";
}
<link rel="stylesheet" href="~/css/code.css">
<div class="text-center">
    <h1>
        Шаблонный метод (Template Method)
    </h1>
    <p class="text-left">Шаблонный метод (Template Method) определяет общий алгоритм поведения подклассов, позволяя им переопределить отдельные шаги этого алгоритма без изменения его структуры.</p>
    <h2>Когда использовать шаблонный метод?</h2>

    <ul>
        <li class="text-left">Когда планируется, что в будущем подклассы должны будут переопределять различные этапы алгоритма без изменения его структуры</li>
        <li class="text-left">Когда в классах, реализующим схожий алгоритм, происходит дублирование кода. Вынесение общего кода в шаблонный метод уменьшит его дублирование в подклассах.</li>

    </ul>

    <p class="text-left">
        Схематично в UML алгоритм можно изобразить следующим образом:
    </p>
    <img src="~/image/templatemethod1.png" />

    <p class="text-left">Формальная реализация паттерна на C#:</p>
    <div id="hler_128284" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">AbstractClass</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">TemplateMethod()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Operation1();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Operation2();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">Operation1();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">Operation2();</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">class</code> <code class="plain">ConcreteClass : AbstractClass</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Operation1()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Operation2()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li></ol></div>
    <h2>Участники</h2>
    <ul>
        <li class="text-left">AbstractClass: определяет шаблонный метод TemplateMethod(), который реализует алгоритм. Алгоритм может состоять из последовательности вызовов других методов, часть из которых может быть абстрактными и должны быть переопределены в классах-наследниках. При этом сам метод TemplateMethod(), представляющий структуру алгоритма, переопределяться не должен. </li>
        <li class="text-left">ConcreteClass: подкласс, который может переопределять различные методы родительского класса.</li>


    </ul>
    <p class="text-left">Рассмотрим применение на конкретном примере. Допустим, в нашей программе используются объекты, представляющие учебу в школе и в вузе:</p>
    <div id="hler_521168" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">class</code> <code class="plain">School</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// идем в первый класс</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Enter() { }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// обучение</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Study() { }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// сдаем выпускные экзамены</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">PassExams() { }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// получение аттестата об окончании</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">GetAttestat() { }</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1"><code class="keyword">class</code> <code class="plain">University</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// поступление в университет</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Enter() { }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// обучение</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Study() { }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// проходим практику</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Practice() { }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// сдаем выпускные экзамены</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">PassExams() { }</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">// получение диплома</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">GetDiploma() { }</code></li><li class="alt1"><code class="plain">}</code></li></ol></div>
    <p class="text-left">Как видно, эти классы очень похожи, и самое главное, реализуют примерно общий алгоритм. Да, где-то будет отличаться реализация методов, где-то чуть больше методов, но в целом мы имеем общий алгоритм, а функциональность обоих классов по большому счету дублируется. Поэтому для улучшения структуры классов мы могли бы применить шаблонный метод:</p>
    <div id="hler_242455" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">class</code> <code class="plain">Program</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">static</code> <code class="keyword">void</code> <code class="plain">Main(</code><code class="keyword">string</code><code class="plain">[] args)</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">School school = </code><code class="keyword">new</code> <code class="plain">School();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">University university = </code><code class="keyword">new</code> <code class="plain">University();</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">school.Learn();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">university.Learn();</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.Read();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1"><code class="plain">}</code></li><li class="alt2"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Education</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">void</code> <code class="plain">Learn()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Enter();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Study();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">PassExams();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">GetDocument();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">Enter();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">Study();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">virtual</code> <code class="keyword">void</code> <code class="plain">PassExams()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Сдаем выпускные экзамены"</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">GetDocument();</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">class</code> <code class="plain">School : Education</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Enter()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Идем в первый класс"</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Study()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Посещаем уроки, делаем домашние задания"</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">GetDocument()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Получаем аттестат о среднем образовании"</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2"><code class="keyword">class</code> <code class="plain">University : Education</code></li><li class="alt1"><code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Enter()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Сдаем вступительные экзамены и поступаем в ВУЗ"</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Study()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Посещаем лекции"</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Проходим практику"</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;</li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">PassExams()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Сдаем экзамен по специальности"</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;</li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">GetDocument()</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Получаем диплом о высшем образовании"</code><code class="plain">);</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2"><code class="plain">}</code></li></ol></div>
    <p class="text-left">При этом в базовом классе необязательно определять все методы алгоритма как абстрактные. Можно определить реализацию методов по умолчанию, как в случае с методом PassExams().</p>
    <p class="text-left">И в результате работы программы консоль выведет:</p>
    <img src="~/image/templatemethod2.png" />
    <p class="text-left">В данном случае надо отметить, что несмотря на то, что мы не можем в производном классе переопределить шаблонный метод Learn(), тем не менее мы можем скрыть реализацию этого метода в классе-наследнике:</p>
    <div id="hler_801458" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">class</code> <code class="plain">School : Education</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">new</code> <code class="keyword">void</code> <code class="plain">Learn()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Console.WriteLine(</code><code class="string">"Не хочу учиться"</code><code class="plain">);</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">//..........................................</code></li><li class="alt2"><code class="plain">}</code></li></ol></div>
    <p class="text-left">В итоге реализация шаблонного метода не будет иметь смысла.</p>
    <p class="text-left">Также надо отметить ситуацию с наследованием базового класса. Например, у нас может быть ситуация, когда базовый класс Education сам наследует метод Learn от другого класса:</p>
    <div id="hler_321737" class="slgh"><ol class="lines no-wrap"><li class="alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Learning</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">abstract</code> <code class="keyword">void</code> <code class="plain">Learn();</code></li><li class="alt2"><code class="plain">}</code></li><li class="alt1"><code class="keyword">abstract</code> <code class="keyword">class</code> <code class="plain">Education :Learning</code></li><li class="alt2"><code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="keyword">public</code> <code class="keyword">sealed</code> <code class="keyword">override</code> <code class="keyword">void</code> <code class="plain">Learn()</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">{</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Enter();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">Study();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">PassExams();</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">GetDocument();</code></li><li class="alt1">&nbsp;&nbsp;&nbsp;&nbsp;<code class="plain">}</code></li><li class="alt2">&nbsp;&nbsp;&nbsp;&nbsp;<code class="comments">//&nbsp; остальные методы класса</code></li><li class="alt1"><code class="plain">}</code></li></ol></div>
    <p class="text-left">Чтобы сокрыть алгоритм от изменения в классах наследниках, метод Learn объявляется с ключевым словом sealed.</p>

    

</div>