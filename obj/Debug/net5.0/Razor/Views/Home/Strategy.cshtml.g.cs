#pragma checksum "K:\универ\program\Основы программирования на платформе .NET\экзамен\итоговый проект сайта\WebApplication1\WebApplication1\Views\Home\Strategy.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b24f109b40b2b7e19f9fc18714245c22648573f3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Strategy), @"mvc.1.0.view", @"/Views/Home/Strategy.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "K:\универ\program\Основы программирования на платформе .NET\экзамен\итоговый проект сайта\WebApplication1\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "K:\универ\program\Основы программирования на платформе .NET\экзамен\итоговый проект сайта\WebApplication1\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b24f109b40b2b7e19f9fc18714245c22648573f3", @"/Views/Home/Strategy.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"729efaa87342638aecfe1a972ce9f9f8dff55b4c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Strategy : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/code.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/image/strategy1.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/image/strategy2.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "K:\универ\program\Основы программирования на платформе .NET\экзамен\итоговый проект сайта\WebApplication1\WebApplication1\Views\Home\Strategy.cshtml"
  
    ViewBag.Title = "Стратегия";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "b24f109b40b2b7e19f9fc18714245c22648573f34967", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<div class=""text-center"">
    <h1>
        Стратегия (Strategy)
    </h1>
    <p class=""text-left"">Паттерн Стратегия (Strategy) представляет шаблон проектирования, который определяет набор алгоритмов, инкапсулирует каждый из них и обеспечивает их взаимозаменяемость. В зависимости от ситуации мы можем легко заменить один используемый алгоритм другим. При этом замена алгоритма происходит независимо от объекта, который использует данный алгоритм.</p>
    <h2>Когда использовать стратегию?</h2>
    <ul>
        <li class=""text-left"">Когда есть несколько родственных классов, которые отличаются поведением. Можно задать один основной класс, а разные варианты поведения вынести в отдельные классы и при необходимости их применять</li>
        <li class=""text-left"">Когда необходимо обеспечить выбор из нескольких вариантов алгоритмов, которые можно легко менять в зависимости от условий</li>
        <li class=""text-left"">Когда необходимо менять поведение объектов на стадии выполнения программы</li>
        <li ");
            WriteLiteral("class=\"text-left\">Когда класс, применяющий определенную функциональность, ничего не должен знать о ее реализации</li>\r\n    </ul>\r\n    <p class=\"text-left\">Формально паттерн Стратегия можно выразить следующей схемой UML:</p>\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "b24f109b40b2b7e19f9fc18714245c22648573f37383", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    <p class=""text-left"">Формальное определение паттерна на языке C# может выглядеть следующим образом:</p>
    <div id=""hler_741553"" class=""slgh""><ol class=""lines no-wrap""><li class=""alt1""><code class=""keyword"">public</code> <code class=""keyword"">interface</code> <code class=""plain"">IStrategy</code></li><li class=""alt2""><code class=""plain"">{</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">void</code> <code class=""plain"">Algorithm();</code></li><li class=""alt2""><code class=""plain"">}</code></li><li class=""alt1"">&nbsp;&nbsp;</li><li class=""alt2""><code class=""keyword"">public</code> <code class=""keyword"">class</code> <code class=""plain"">ConcreteStrategy1 : IStrategy</code></li><li class=""alt1""><code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""keyword"">void</code> <code class=""plain"">Algorithm()</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{}</code></li><li class=""alt2""><code class=""plai");
            WriteLiteral(@"n"">}</code></li><li class=""alt1"">&nbsp;&nbsp;</li><li class=""alt2""><code class=""keyword"">public</code> <code class=""keyword"">class</code> <code class=""plain"">ConcreteStrategy2 : IStrategy</code></li><li class=""alt1""><code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""keyword"">void</code> <code class=""plain"">Algorithm()</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{}</code></li><li class=""alt2""><code class=""plain"">}</code></li><li class=""alt1"">&nbsp;&nbsp;</li><li class=""alt2""><code class=""keyword"">public</code> <code class=""keyword"">class</code> <code class=""plain"">Context</code></li><li class=""alt1""><code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""plain"">IStrategy ContextStrategy { </code><code class=""keyword"">get</code><code class=""plain"">; </code><code class=""keyword"">set</code><code class=""plain"">; }</code></li><li class=""alt1"">&nbsp;&n");
            WriteLiteral(@"bsp;</li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""plain"">Context(IStrategy _strategy)</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">ContextStrategy = _strategy;</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">}</code></li><li class=""alt2"">&nbsp;&nbsp;</li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""keyword"">void</code> <code class=""plain"">ExecuteAlgorithm()</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">ContextStrategy.Algorithm();</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">}</code></li><li class=""alt1""><code class=""plain"">}</code></li></ol></div>
    <h3>Участники</h3>
    <p class=""text-left"">Как видно из диаграммы, з");
            WriteLiteral(@"десь есть следующие участники:</p>
    <ul>
        <li class=""text-left"">Интерфейс IStrategy, который определяет метод Algorithm(). Это общий интерфейс для всех реализующих его алгоритмов. Вместо интерфейса здесь также можно было бы использовать абстрактный класс.</li>
        <li class=""text-left"">Классы ConcreteStrategy1 и ConcreteStrategy, которые реализуют интерфейс IStrategy, предоставляя свою версию метода Algorithm(). Подобных классов-реализаций может быть множество.</li>
        <li class=""text-left"">Класс Context хранит ссылку на объект IStrategy и связан с интерфейсом IStrategy отношением агрегации.</li>

    </ul>
    <p class=""text-left"">В данном случае объект IStrategy заключена в свойстве ContextStrategy, хотя также для нее можно было бы определить приватную переменную, а для динамической установки использовать специальный метод.</p>
    <p class=""text-left"">Теперь рассмотрим конкретный пример. Существуют различные легковые машины, которые используют разные источники энергии: электричес");
            WriteLiteral(@"тво, бензин, газ и так далее. Есть гибридные автомобили. В целом они похожи и отличаются преимущественно видом источника энергии. Не говоря уже о том, что мы можем изменить применяемый источник энергии, модифицировав автомобиль. И в данном случае вполне можно применить паттерн стратегию:</p>
    <div id=""hler_131767"" class=""slgh""><ol class=""lines no-wrap""><li class=""alt1""><code class=""plain"">pclass Program</code></li><li class=""alt2""><code class=""plain"">{</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">static</code> <code class=""keyword"">void</code> <code class=""plain"">Main(</code><code class=""keyword"">string</code><code class=""plain"">[] args)</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">Car auto = </code><code class=""keyword"">new</code> <code class=""plain"">Car(4, </code><code class=""string"">""Volvo""</code><code class=""plain"">, </code><code class=""keyword"">new<");
            WriteLiteral(@"/code> <code class=""plain"">PetrolMove());</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">auto.Move();</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">auto.Movable = </code><code class=""keyword"">new</code> <code class=""plain"">ElectricMove();</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">auto.Move();</code></li><li class=""alt1"">&nbsp;&nbsp;</li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">Console.ReadLine();</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">}</code></li><li class=""alt2""><code class=""plain"">}</code></li><li class=""alt1""><code class=""keyword"">interface</code> <code class=""plain"">IMovable</code></li><li class=""alt2""><code class=""plain"">{</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">void</code> <code class=""plain"">Move();</code></li><li class=""alt2""><code class=""pl");
            WriteLiteral(@"ain"">}</code></li><li class=""alt1"">&nbsp;&nbsp;</li><li class=""alt2""><code class=""keyword"">class</code> <code class=""plain"">PetrolMove : IMovable</code></li><li class=""alt1""><code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""keyword"">void</code> <code class=""plain"">Move()</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">Console.WriteLine(</code><code class=""string"">""Перемещение на бензине""</code><code class=""plain"">);</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">}</code></li><li class=""alt2""><code class=""plain"">}</code></li><li class=""alt1"">&nbsp;&nbsp;</li><li class=""alt2""><code class=""keyword"">class</code> <code class=""plain"">ElectricMove : IMovable</code></li><li class=""alt1""><code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code ");
            WriteLiteral(@"class=""keyword"">void</code> <code class=""plain"">Move()</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">Console.WriteLine(</code><code class=""string"">""Перемещение на электричестве""</code><code class=""plain"">);</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">}</code></li><li class=""alt2""><code class=""plain"">}</code></li><li class=""alt1""><code class=""keyword"">class</code> <code class=""plain"">Car</code></li><li class=""alt2""><code class=""plain"">{</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">protected</code> <code class=""keyword"">int</code> <code class=""plain"">passengers; </code><code class=""comments"">// кол-во пассажиров</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">protected</code> <code class=""keyword"">string</code> <code class=""plain"">model; </code><code class=""comments"">// модель автомобиля</code></li><li class");
            WriteLiteral(@"=""alt1"">&nbsp;&nbsp;</li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""plain"">Car(</code><code class=""keyword"">int</code> <code class=""plain"">num, </code><code class=""keyword"">string</code> <code class=""plain"">model, IMovable mov)</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">this</code><code class=""plain"">.passengers = num;</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">this</code><code class=""plain"">.model = model;</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">Movable = mov;</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">}</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""plain"">IMovable Movable { </code><code class=""keyword"">private</code> <code class=""keyword"">get<");
            WriteLiteral(@"/code><code class=""plain"">; </code><code class=""keyword"">set</code><code class=""plain"">; }</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""keyword"">public</code> <code class=""keyword"">void</code> <code class=""plain"">Move()</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">{</code></li><li class=""alt1"">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">Movable.Move();</code></li><li class=""alt2"">&nbsp;&nbsp;&nbsp;&nbsp;<code class=""plain"">}</code></li><li class=""alt1""><code class=""plain"">}</code></li></ol></div>
    <h2>Результат работы программы:</h2>

    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "b24f109b40b2b7e19f9fc18714245c22648573f319004", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    <p class=""text-left"">В данном случае в качестве IStrategy выступает интерфейс IMovable, определяющий метод Move(). А реализующий этот интерфейс семейство алгоритмов представлено классами ElectricMove и PetroleMove. И данные алгоритмы использует класс Car.</p>





</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
